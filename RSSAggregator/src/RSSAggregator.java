import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;
import components.xmltree.XMLTree;
import components.xmltree.XMLTree1;

/**
 * Program to convert an XML RSS (version 2.0) feed from a given URL into the
 * corresponding HTML output file.
 *
 * @author Yahui Zhou
 *
 */
public final class RSSAggregator {

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private RSSAggregator() {
    }

    /**
     * Outputs the "opening" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * <html> <head> <title>the channel tag title as the page title</title>
     * </head> <body>
     * <h1>the page title inside a link to the <channel> link</h1>
     * <p>
     * the channel description
     * </p>
     * <table border="1">
     * <tr>
     * <th>Date</th>
     * <th>Source</th>
     * <th>News</th>
     * </tr>
     *
     * @param channel
     *            the channel element XMLTree
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the root of channel is a <channel> tag] and out.is_open
     * @ensures out.content = #out.content * [the HTML "opening" tags]
     */
    private static void outputHeader(XMLTree channel, SimpleWriter out) {
        assert channel != null : "Violation of: channel is not null";
        assert out != null : "Violation of: out is not null";
        assert channel.isTag() && channel.label().equals("channel") : ""
                + "Violation of: the label root of channel is a <channel> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        // find the index of title and link
        int titleInd = getChildElement(channel, "title");
        int linkInd = getChildElement(channel, "link");
        // get the link of channel
        String urlChannel = channel.child(linkInd).child(0).label();

        // make the <channel> title as the page title
        // (or "Empty Title" if the <title> tag has no children)
        // make a header with the page title which linked to the <channel> link
        if (channel.child(titleInd).numberOfChildren() == 0) {
            // add out put
            out.println("<html> <head> <title> Empty Title </title>");
            out.println("</head> <body>");
            out.println("<h1> <a href=\"" + urlChannel
                    + "\">Empty Title </a> </h1>");
        } else {
            String titleName = channel.child(titleInd).child(0).label();
            // add out put
            out.println("<html> <head> <title>" + titleName + "</title>");
            out.println("</head> <body>");
            out.println("<h1> <a href=\"" + urlChannel + "\">" + titleName
                    + "</a> </h1>");
        }

        // make a paragraph with the <channel> description
        // (or "No description" if the <description> tag has no children)
        int desInd = getChildElement(channel, "description");
        out.println("<p>");
        if (channel.child(desInd).numberOfChildren() == 0) {
            // add out put
            out.print("No description");
        } else {
            // add out put
            out.println(channel.child(desInd).child(0).label());
        }
        out.println("</p>");

        // add a table to show to news
        // add appropriate headers to the table
        out.println("<table border=\"1\">");
        out.println("<tr>");
        out.println("<th>Date</th>");
        out.println("<th>Source</th>");
        out.println("<th>News</th>");
        out.println("</tr>");

        // Find all the news.
        // Processes one news item and outputs one table row.
        int childNum = channel.numberOfChildren();
        for (int j = 0; j < childNum; j++) {
            String childName = channel.child(j).label();
            if (childName.equals("item")) {
                XMLTree item = channel.child(j);
                processItem(item, out);
            }
        }
    }

    /**
     * Outputs the "closing" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * </table>
     * </body> </html>
     *
     * @param out
     *            the output stream
     * @updates out.contents
     * @requires out.is_open
     * @ensures out.content = #out.content * [the HTML "closing" tags]
     */
    private static void outputFooter(SimpleWriter out) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";

        // outputs the "closing" tags in the generated HTML file
        out.println("</table>");
        out.println("</body> </html>");
    }

    /**
     * Finds the first occurrence of the given tag among the children of the
     * given {@code XMLTree} and return its index; returns -1 if not found.
     *
     * @param xml
     *            the {@code XMLTree} to search
     * @param tag
     *            the tag to look for
     * @return the index of the first child of type tag of the {@code XMLTree}
     *         or -1 if not found
     * @requires [the label of the root of xml is a tag]
     * @ensures <pre>
     * getChildElement =
     *  [the index of the first child of type tag of the {@code XMLTree} or
     *   -1 if not found]
     * </pre>
     */
    private static int getChildElement(XMLTree xml, String tag) {
        assert xml != null : "Violation of: xml is not null";
        assert tag != null : "Violation of: tag is not null";
        assert xml.isTag() : "Violation of: the label root of xml is a tag";

        // find the first occurrence of targeted tag and return its index
        int child = xml.numberOfChildren();
        int index = -1;
        boolean found = false;
        int i = 0;

        while (i < child && !found) {
            String name = xml.child(i).label();
            if (name.equals(tag)) {
                index = i;
                found = true;
            }
            i++;
        }

        return index;
    }

    /**
     * Processes one news item and outputs one table row. The row contains three
     * elements: the publication date, the source, and the title (or
     * description) of the item.
     *
     * @param item
     *            the news item
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the label of the root of item is an <item> tag] and
     *           out.is_open
     * @ensures <pre>
     * out.content = #out.content *
     *   [an HTML table row with publication date, source, and title of news item]
     * </pre>
     */
    private static void processItem(XMLTree item, SimpleWriter out) {
        assert item != null : "Violation of: item is not null";
        assert out != null : "Violation of: out is not null";
        assert item.isTag() && item.label().equals("item") : ""
                + "Violation of: the label root of item is an <item> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        // Processes one news item and outputs one table row.
        out.println("<tr>");

        // fill the date if the pudDate is available
        // otherwise fill "No date available" instead
        int dateInd = getChildElement(item, "pubDate");
        if (dateInd != -1) {
            out.println(
                    "<td>" + item.child(dateInd).child(0).label() + "</td>");

        } else {
            // add out put
            out.println("<td>No date available</td>");
        }

        // check if source is available
        // if it is not, fill "No source available" instead
        // if it is, check whether the source name is available
        // if it is, fill the source name linked to its url
        // if it is not, fill "No source name available" which linked to its url
        int sourceInd = getChildElement(item, "source");
        if (sourceInd != -1) {
            // add out put
            XMLTree source = item.child(sourceInd);
            String urlSource = source.attributeValue("url");
            if (source.numberOfChildren() != 0) {
                String sourceText = source.child(0).label();
                out.println("<td><a href=\"" + urlSource + "\">" + sourceText
                        + "</a></td>");
            } else {
                out.println("<td><a href=\"" + urlSource
                        + "\">No source name available</a></td>");
            }

        } else {
            // add out put
            out.println("<td>No source available</td>");
        }

        // check if title or description is available
        // fill the title, if present and not empty,
        // or the description, if not empty, or "No title available",
        // which should be linked if a link for the news item is available
        int titleItemInd = getChildElement(item, "title");
        int linkInd = getChildElement(item, "link");

        if (linkInd != -1) {
            String urlLink = item.child(linkInd).child(0).label();
            // when title is available
            // check if the title text is available
            // if it is, link the title text to the url
            // if it is not, turn to check description
            if (titleItemInd != -1
                    && item.child(titleItemInd).numberOfChildren() != 0) {
                String titleText = item.child(titleItemInd).child(0).label();
                out.println("<td><a href=\"" + urlLink + "\">" + titleText
                        + "</a></td>");
            } else {
                // when the title is not available
                // turn to check the description
                // if the description text is not empty
                // fill the table with the description instead
                // link the description text to the url
                // otherwise, link "No title available" instead.
                int desInd = getChildElement(item, "description");
                if (item.child(desInd).numberOfChildren() != 0) {
                    String desText = item.child(desInd).child(0).label();
                    out.println("<td><a href=\"" + urlLink + "\">" + desText
                            + "</a></td>");
                } else {
                    out.println("<td><a href=\"" + urlLink
                            + "\">No title available</a></td>");
                }

            }
        } else {
            // when there is no url
            // check if title or description is available
            // fill the title, if present and not empty,
            // or the description, if not empty, or "No title available",
            // when the title is available
            // check if the title text is available
            // if it is, fill the title text in the table
            // if it is not, turn to check description.
            if (titleItemInd != -1
                    && item.child(titleItemInd).numberOfChildren() != 0) {
                String titleText = item.child(titleItemInd).child(0).label();
                out.println("<td>" + titleText + "</td>");
            } else {
                // when the title is not available
                // turn to the description
                // check if the description text is available
                // if it is, fill the description text in the table
                // if it is not, fill "No title available" instead.

                int desInd = getChildElement(item, "description");
                if (item.child(desInd).numberOfChildren() != 0) {
                    String desText = item.child(desInd).child(0).label();
                    out.println("<td>" + desText + "</td>");
                } else {
                    out.println("<td>No title available</td>");
                }
            }

        }
        out.println("</tr>");
    }

    /**
     * Processes one XML RSS (version 2.0) feed from a given URL converting it
     * into the corresponding HTML output file.
     *
     * @param url
     *            the URL of the RSS feed
     * @param file
     *            the name of the HTML output file
     * @param out
     *            the output stream to report progress or errors
     * @updates out.content
     * @requires out.is_open
     * @ensures <pre>
     * [reads RSS feed from url, saves HTML document with table of news items
     *   to file, appends to out.content any needed messages]
     * </pre>
     */
    private static void processFeed(String url, String file, SimpleWriter out) {
        boolean isRss = false;

        // Check that the label of the root of the XMLTree is an <rss> tag and
        // that it has a version attribute with value "2.0".
        XMLTree s = new XMLTree1(url);
        String name = s.label();
        if (name.equals("rss")) {
            if (s.hasAttribute("version")) {
                String value = s.attributeValue("version");
                if (value.equals("2.0")) {
                    isRss = true;
                }
            }
        }

        // output the file if the XMLTree is RSS
        // if the XMLTree is not RSS, exit the program
        SimpleWriter outFileInd = new SimpleWriter1L(file);
        if (isRss) {
            XMLTree channel = s.child(0);
            outputHeader(channel, outFileInd);
            outputFooter(outFileInd);
        } else {
            out.println("Not a valid RSS 2.0 feed");
            outFileInd.println("<html><head><title>Error</title></head><body>");
            outFileInd.println("<h1>Not a valid RSS 2.0 feed</h1>");
            outFileInd.println("</body> </html>");
            outputFooter(outFileInd);
        }
        outFileInd.close();
    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        // ask for the URL of an RSS 2.0 feed
        out.print("Please enter the name of an XML file "
                + "containing a list of URLs for RSS v2.0 feeds: ");
        String url = in.nextLine();
        XMLTree t = new XMLTree1(url);

        // ask for the name of output file
        out.print("Please enter the name of the output file: ");
        out.println("(end with .html)");
        String outputFileWhole = in.nextLine();
        // write the output into the file
        SimpleWriter file = new SimpleWriter1L(outputFileWhole);

        // create the index page
        String titleWhole = t.attributeValue("title");
        file.println("<html> <head> <title>" + titleWhole + "</title>");
        file.println("</head> <body>");
        file.println("<h1>" + titleWhole + "</h1>");

        // create the HTML page for each news
        int newsSum = t.numberOfChildren();
        int i = 0;
        file.println("<ul>");
        while (i < newsSum) {
            XMLTree child = t.child(i);
            String urlIndi = child.attributeValue("url");
            String name = child.attributeValue("name");
            String fileInd = child.attributeValue("file");

            file.println(
                    "<li><a href=\"" + fileInd + "\">" + name + "</a></li>");

            // check whether the RSS 2.0 feed is valid or not
            // if it is valid, create the HTML page and show the information
            // if it is not, print a message showing the error to the user
            processFeed(urlIndi, fileInd, out);

            i++;
        }
        file.println("</ul>");

        file.close();
        in.close();
        out.close();
    }

}
